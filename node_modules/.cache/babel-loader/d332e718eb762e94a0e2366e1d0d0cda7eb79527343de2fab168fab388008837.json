{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\enes\\\\Documents\\\\GitHub\\\\database-management\\\\src\\\\Components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport './Styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  let rectColor = \"white\";\n  const blockSize = 25;\n  const rows = 20;\n  const cols = 30;\n  const skillsOnBoard = [];\n  let skillsAvailable = 1;\n  let ballsOnBoard = [];\n  //let tableVelocity = 0;\n  const tableColor = \"blue\";\n  let direction = 0; // 0 for stationary, -1 for left, 1 for right\n  const blocks = [];\n  /*var scoreParagraph = document.getElementById(\"score\");\r\n  var timeParagraph = document.getElementById(\"time\");*/\n  let score = 0;\n  let timeSpent = 0;\n  const colors = ['red', 'blue', 'green', 'orange'];\n  let currentIndex = 0;\n  const tableSize = {\n    x: 100,\n    y: 10\n  };\n  let tableX = blockSize * cols / 2 - tableSize.x / 2;\n  let tableY = 450;\n  let board;\n  let context;\n  // ... (rest of the variables)\n\n  useEffect(() => {\n    const audio = new Audio('./sfx/start.mp3');\n    //audio.play();\n    const initializeGame = () => {\n      board = document.getElementById(\"board\");\n      context = board.getContext(\"2d\"); //used for drawing on the board\n      fillBlocks();\n      document.addEventListener(\"keydown\", go);\n      document.addEventListener(\"keyup\", stop);\n      ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 0));\n      setInterval(update, 1000 / 60); //100 milliseconds\n    };\n    const fillBlocks = () => {\n      for (let i = 0; i < 5; i++) {\n        let blockCount = cols / 2;\n        let offset = i % 2 === 0 ? 0 : 1;\n        for (let j = 0; j < blockCount; j++) {\n          let col1 = j * 2 + offset;\n          let col2 = cols - 1 - j * 2 - offset;\n          let bl1 = new Block(6 - (i + 1), i + 1, col1, 6 - (i + 1));\n          let bl2 = new Block(6 - (i + 1), i + 1, col2, 6 - (i + 1));\n          blocks.push(bl1);\n          blocks.push(bl2);\n        }\n      }\n    };\n    const drawSkills = (skillsOnBoard, context) => {\n      for (let i = skillsOnBoard.length - 1; i >= 0; i--) {\n        let skill = skillsOnBoard[i];\n        let x = skill.col * blockSize;\n        let y = skill.row * blockSize;\n        let color;\n        switch (skill.type) {\n          case 1:\n            color = '#AC00AC';\n            break;\n          case 2:\n            color = 'green';\n            break;\n          case 3:\n            color = 'yellow';\n            break;\n          case 4:\n            color = 'orange';\n            break;\n          case 5:\n            color = 'red';\n            break;\n        }\n        context.fillStyle = color;\n        context.fillRect(x, y, blockSize - 20, blockSize - 20);\n        skill.row += 0.1;\n        if (skill.row > 21) {\n          skillsOnBoard.splice(i, 1); // Remove the skill at index i\n        }\n      }\n    };\n    const drawBlocks = (blocks, context) => {\n      blocks.forEach(function (block) {\n        let x = block.col * blockSize;\n        let y = block.row * blockSize;\n        let color;\n        switch (block.toughness) {\n          case 1:\n            color = '#AC00AC';\n            break;\n          case 2:\n            color = 'green';\n            break;\n          case 3:\n            color = 'yellow';\n            break;\n          case 4:\n            color = 'orange';\n            break;\n          case 5:\n            color = 'red';\n            break;\n        }\n\n        // draw block\n        context.fillStyle = color;\n        context.fillRect(x, y, blockSize, blockSize);\n\n        // draw lines\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x + blockSize, y);\n        context.lineTo(x + blockSize, y + blockSize);\n        context.lineTo(x, y + blockSize);\n        context.lineTo(x, y);\n        context.closePath();\n        context.strokeStyle = 'black';\n        context.stroke();\n      });\n    };\n    const go = e => {\n      if (e.code === \"ArrowLeft\" || e.key === \"a\") {\n        direction = -1;\n      } else if (e.code === \"ArrowRight\" || e.key === \"d\") {\n        direction = 1;\n      } else if (e.key === \"1\" && skillsAvailable % 2 === 0) {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 1));\n        skillsAvailable = skillsAvailable / 2;\n        //rectangleElement = document.querySelector(\".rectangle1\");\n        //rectangleElement.style.backgroundColor = \"darkred\";\n      } else if (e.key === \"2\" && skillsAvailable % 3 === 0) {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 2));\n        skillsAvailable = skillsAvailable / 3;\n        //rectangleElement = document.querySelector(\".rectangle2\");\n        // rectangleElement.style.backgroundColor = \"darkred\";\n      } else if (e.key === \"3\" && skillsAvailable % 5 === 0) {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 3));\n        skillsAvailable = skillsAvailable / 5;\n        //rectangleElement = document.querySelector(\".rectangle3\");\n        //rectangleElement.style.backgroundColor = \"darkred\";\n      } else if (e.key === \"4\" && skillsAvailable % 7 === 0) {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 4));\n        skillsAvailable = skillsAvailable / 7;\n        // rectangleElement = document.querySelector(\".rectangle4\");\n        //rectangleElement.style.backgroundColor = \"darkred\";\n      } else if (e.key === \"5\" && skillsAvailable % 11 === 0) {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 5));\n        skillsAvailable = skillsAvailable / 11;\n        // rectangleElement = document.querySelector(\".rectangle5\");\n        // rectangleElement.style.backgroundColor = \"darkred\";\n      } else if (e.key === \" \") {\n        ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 5));\n      }\n    };\n    const stop = e => {\n      if ((e.code === \"ArrowLeft\" || e.key === \"a\") && direction === -1) {\n        direction = 0;\n      } else if ((e.code === \"ArrowRight\" || e.key === \"d\") && direction === 1) {\n        direction = 0;\n      }\n    };\n    class Block {\n      constructor(toughness, row, col, type) {\n        this.row = row + 1;\n        this.col = col;\n        this.toughness = toughness;\n        this.type = type;\n      }\n    }\n    class Skill {\n      constructor(type, row, col) {\n        this.row = row;\n        this.col = col;\n        this.type = type;\n      }\n    }\n    class Ball {\n      constructor(x, y, type) {\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.dx = 3;\n        this.dy = 4;\n        this.radius = 10;\n        this.color = '#FFF';\n      }\n      reset() {\n        if (this.type === 0) {\n          score -= 1000;\n          this.x = tableX + tableSize.x / 2;\n          this.y = tableY - this.radius;\n          this.dx = 3;\n          this.dy = 4;\n        } else {\n          // Find the index of this ball in the ballsOnBoard array\n          const index = ballsOnBoard.indexOf(this);\n          if (index !== -1) {\n            // If the ball is in the array, remove it\n            ballsOnBoard.splice(index, 1);\n          }\n        }\n      }\n      draw(context) {\n        context.beginPath();\n        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, true);\n        context.closePath();\n        context.fillStyle = this.color;\n        context.fill();\n        context.beginPath();\n        context.arc(this.x, this.y, this.radius - 3, 0, 2 * Math.PI, true);\n        context.closePath();\n        switch (this.type) {\n          case 0:\n            context.fillStyle = '#FFF';\n            break;\n          case 1:\n            context.fillStyle = \"#AC00AC\";\n            break;\n          case 2:\n            context.fillStyle = 'green';\n            break;\n          case 3:\n            context.fillStyle = 'yellow';\n            break;\n          case 4:\n            context.fillStyle = 'orange';\n            break;\n          case 5:\n            context.fillStyle = '#F00';\n            break;\n        }\n        context.fill();\n      }\n      move() {\n        this.x += this.dx;\n        this.y += this.dy;\n\n        // check for collisions with the walls\n        if (this.x - this.radius < 0) {\n          this.x = this.radius;\n          this.dx = -this.dx;\n        } else if (this.x + this.radius > board.width) {\n          this.x = board.width - this.radius;\n          this.dx = -this.dx;\n        } else {\n          // check for collisions with blocks\n          let collidedBlockIndex = -1;\n          for (let i = 0; i < blocks.length; i++) {\n            let block = blocks[i];\n            let x = block.col * blockSize;\n            let y = block.row * blockSize;\n            if (this.y - this.radius < y + blockSize && this.y + this.radius > y && this.x + this.radius > x && this.x - this.radius < x + blockSize) {\n              // collision detected\n              collidedBlockIndex = i;\n              break;\n            }\n          }\n          if (collidedBlockIndex !== -1) {\n            let block = blocks[collidedBlockIndex];\n            let x = block.col * blockSize;\n            if (this.x > x && this.x < x + blockSize) {\n              // ball hit the top or bottom of the block\n              this.dy = -this.dy;\n            } else {\n              // ball hit the left or right side of the block\n              this.dx = -this.dx;\n            }\n            block.toughness--;\n            if (block.toughness <= 0) {\n              let rng = Math.floor(Math.random() * 10);\n              let blk = blocks.splice(collidedBlockIndex, 1);\n              score += blk[0].type * 100;\n              if (rng > 4) {\n                let skill = new Skill(blk[0].type, blk[0].row, blk[0].col);\n                skillsOnBoard.push(skill);\n              }\n              if (blocks.length === 0) {\n                alert(\"Game Over! Your Score: \" + score);\n              }\n            }\n          }\n        }\n        if (this.y - this.radius < 0) {\n          this.y = this.radius;\n          this.dy = -this.dy;\n        } else if (this.y > board.height) {\n          this.reset();\n        } else if (this.y + this.radius > tableY && this.y - this.radius < tableY + tableSize.y && this.x > tableX && this.x < tableX + tableSize.x) {\n          // I want to run a sound here\n          let collisionPoint = (this.x - (tableX + tableSize.x / 2)) / (tableSize.x / 2);\n          this.dx = collisionPoint * 5;\n          this.dy = -Math.sqrt(25 - this.dx ** 2);\n          if (this.type === 0) {}\n        }\n      }\n    }\n    const displaySkillsOnScreen = skillsOnBoard => {\n      const skillsDisplay = document.getElementById('skillsDisplay');\n      skillsDisplay.innerHTML = ''; // Clear any previous content\n\n      skillsOnBoard.forEach(function () {\n        // Create a new paragraph for each skill and display its information\n        const skillInfo = document.createElement('p');\n\n        // Append the skill information to the display element\n        skillsDisplay.appendChild(skillInfo);\n      });\n    };\n    const updateSkills = () => {\n      if (skillsOnBoard.length !== 0) {\n        let collidedSkillIndex = -1;\n        for (let i = 0; i < skillsOnBoard.length; i++) {\n          let skill = skillsOnBoard[i];\n          if (skill.col * blockSize > tableX && skill.col * blockSize < tableX + tableSize.x && skill.row * blockSize > tableY - tableSize.y) {\n            // Collision detected\n            collidedSkillIndex = i;\n            break;\n          }\n        }\n        if (collidedSkillIndex !== -1) {\n          const skl = skillsOnBoard.splice(collidedSkillIndex, 1);\n          // var rectangleElement;\n          switch (skl[0].type) {\n            case 1:\n              // rectangleElement = document.querySelector(\".rectangle1\");\n              if (skillsAvailable % 2 !== 0) {\n                skillsAvailable = skillsAvailable * 2;\n              }\n              break;\n            case 2:\n              //rectangleElement = document.querySelector(\".rectangle2\");\n              if (skillsAvailable % 3 !== 0) {\n                skillsAvailable = skillsAvailable * 3;\n              }\n              break;\n            case 3:\n              //rectangleElement = document.querySelector(\".rectangle3\");\n              if (skillsAvailable % 5 !== 0) {\n                skillsAvailable = skillsAvailable * 5;\n              }\n              break;\n            case 4:\n              //rectangleElement = document.querySelector(\".rectangle4\");\n              if (skillsAvailable % 7 !== 0) {\n                skillsAvailable = skillsAvailable * 7;\n              }\n              break;\n            case 5:\n              //rectangleElement = document.querySelector(\".rectangle5\");\n              if (skillsAvailable % 11 !== 0) {\n                skillsAvailable = skillsAvailable * 11;\n              }\n              break;\n          }\n          //rectangleElement.style.backgroundColor = \"#50FF50\";\n        }\n        drawSkills(skillsOnBoard, context);\n      }\n    };\n    const changeColor = () => {\n      currentIndex = (currentIndex + 1) % colors.length;\n      requestAnimationFrame(changeColor);\n    };\n    const update = () => {\n      timeSpent++;\n      context.fillStyle = \"black\";\n      context.fillRect(0, 0, board.width, board.height);\n      context.beginPath();\n      context.arc(tableX + 50, tableY + 100, tableSize.x, -Math.PI / 3, -Math.PI / 3 * 2, true);\n      context.closePath();\n      context.fillStyle = tableColor;\n      context.fill();\n      context.fillStyle = tableColor;\n      context.fillRect(tableX, tableY + 13, tableSize.x, tableSize.y);\n      drawBlocks(blocks, context);\n      updateSkills();\n      tableX += direction * 5; // move the table based on the direction of movement\n      if (tableX < 0) {\n        tableX = 0; // prevent the table from moving beyond the left border\n      } else if (tableX + tableSize.x > board.width) {\n        tableX = board.width - tableSize.x; // prevent the table from moving beyond the right border\n      }\n      ballsOnBoard.forEach(function (ball) {\n        ball.draw(context);\n        ball.move();\n      });\n    };\n\n    // ... (similarly refactor other functions)\n\n    initializeGame(); // Start the game\n\n    // Clean-up logic (similar to componentWillUnmount)\n    return () => {\n      audio.pause();\n      audio.src = '';\n      // Clear any intervals or event listeners\n      // ...\n    };\n  });\n  const purpleColor = classNames('rectStyle', 'purpleBackgroundColor');\n  const greenColor = classNames('rectStyle', 'greenBackgroundColor');\n  const redColor = classNames('rectStyle', 'redBackgroundColor');\n  const yellowColor = classNames('rectStyle', 'yellowBackgroundColor');\n  const orangeColor = classNames('rectStyle', 'orangeBackgroundColor');\n  const mainStyle = 'mainStyle';\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: mainStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: redColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: orangeColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: yellowColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: greenColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: purpleColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"board\",\n      width: cols * blockSize,\n      height: rows * blockSize,\n      style: gameStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Game;\nconst gameStyle = {\n  fontSize: '1%',\n  border: '10px solid grey',\n  // Define border width, style, and color\n  outline: 'none',\n  marginLeft: '1%'\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","classNames","jsxDEV","_jsxDEV","Game","_s","rectColor","blockSize","rows","cols","skillsOnBoard","skillsAvailable","ballsOnBoard","tableColor","direction","blocks","score","timeSpent","colors","currentIndex","tableSize","x","y","tableX","tableY","board","context","audio","Audio","initializeGame","document","getElementById","getContext","fillBlocks","addEventListener","go","stop","push","Ball","setInterval","update","i","blockCount","offset","j","col1","col2","bl1","Block","bl2","drawSkills","length","skill","col","row","color","type","fillStyle","fillRect","splice","drawBlocks","forEach","block","toughness","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","e","code","key","constructor","Skill","dx","dy","radius","reset","index","indexOf","draw","arc","Math","PI","fill","move","width","collidedBlockIndex","rng","floor","random","blk","alert","height","collisionPoint","sqrt","displaySkillsOnScreen","skillsDisplay","innerHTML","skillInfo","createElement","appendChild","updateSkills","collidedSkillIndex","skl","changeColor","requestAnimationFrame","ball","pause","src","purpleColor","greenColor","redColor","yellowColor","orangeColor","mainStyle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","gameStyle","_c","fontSize","border","outline","marginLeft","$RefreshReg$"],"sources":["C:/Users/enes/Documents/GitHub/database-management/src/Components/Game.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport './Styles.css'\r\n\r\nconst Game = () => {\r\n    let rectColor = \"white\";\r\n    const blockSize = 25;\r\n    const rows = 20;\r\n    const cols = 30;\r\n    const skillsOnBoard = [];\r\n    let skillsAvailable = 1;\r\n    let ballsOnBoard = [];\r\n    //let tableVelocity = 0;\r\n    const tableColor = \"blue\";\r\n    let direction = 0; // 0 for stationary, -1 for left, 1 for right\r\n    const blocks = [];\r\n    /*var scoreParagraph = document.getElementById(\"score\");\r\n    var timeParagraph = document.getElementById(\"time\");*/\r\n    let score = 0;\r\n    let timeSpent = 0;\r\n    const colors = ['red', 'blue', 'green', 'orange'];\r\n    let currentIndex = 0;\r\n    const tableSize = { x: 100, y: 10 };\r\n    let tableX = blockSize * cols / 2 - tableSize.x / 2;\r\n    let tableY = 450;\r\n    let board;\r\n    let context;\r\n    // ... (rest of the variables)\r\n\r\n    useEffect(() => {\r\n        const audio = new Audio('./sfx/start.mp3');\r\n        //audio.play();\r\n        const initializeGame = () => {\r\n            board = document.getElementById(\"board\");\r\n            context = board.getContext(\"2d\"); //used for drawing on the board\r\n            fillBlocks();\r\n            document.addEventListener(\"keydown\", go);\r\n            document.addEventListener(\"keyup\", stop);\r\n            ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 0));\r\n            setInterval(update, 1000 / 60); //100 milliseconds\r\n        };\r\n\r\n        const fillBlocks = () => {\r\n            for (let i = 0; i < 5; i++) {\r\n                let blockCount = cols / 2;\r\n                let offset = (i % 2 === 0) ? 0 : 1;\r\n\r\n                for (let j = 0; j < blockCount; j++) {\r\n                    let col1 = j * 2 + offset;\r\n                    let col2 = cols - 1 - j * 2 - offset;\r\n\r\n                    let bl1 = new Block(6 - (i + 1), i + 1, col1, 6 - (i + 1));\r\n                    let bl2 = new Block(6 - (i + 1), i + 1, col2, 6 - (i + 1));\r\n                    blocks.push(bl1);\r\n                    blocks.push(bl2);\r\n                }\r\n            }\r\n        };\r\n\r\n        const drawSkills = (skillsOnBoard, context) => {\r\n            for (let i = skillsOnBoard.length - 1; i >= 0; i--) {\r\n                let skill = skillsOnBoard[i];\r\n                let x = skill.col * blockSize;\r\n                let y = skill.row * blockSize;\r\n                let color;\r\n\r\n                switch (skill.type) {\r\n                    case 1:\r\n                        color = '#AC00AC';\r\n                        break;\r\n                    case 2:\r\n                        color = 'green';\r\n                        break;\r\n                    case 3:\r\n                        color = 'yellow';\r\n                        break;\r\n                    case 4:\r\n                        color = 'orange';\r\n                        break;\r\n                    case 5:\r\n                        color = 'red';\r\n                        break;\r\n                }\r\n                context.fillStyle = color;\r\n                context.fillRect(x, y, blockSize - 20, blockSize - 20);\r\n                skill.row += 0.1;\r\n                if (skill.row > 21) {\r\n                    skillsOnBoard.splice(i, 1); // Remove the skill at index i\r\n                }\r\n            }\r\n        };\r\n        const drawBlocks = (blocks, context) => {\r\n\r\n            blocks.forEach(function (block) {\r\n                let x = block.col * blockSize;\r\n                let y = block.row * blockSize;\r\n                let color;\r\n\r\n                switch (block.toughness) {\r\n                    case 1:\r\n                        color = '#AC00AC';\r\n                        break;\r\n                    case 2:\r\n                        color = 'green';\r\n                        break;\r\n                    case 3:\r\n                        color = 'yellow';\r\n                        break;\r\n                    case 4:\r\n                        color = 'orange';\r\n                        break;\r\n                    case 5:\r\n                        color = 'red';\r\n                        break;\r\n                }\r\n\r\n                // draw block\r\n                context.fillStyle = color;\r\n                context.fillRect(x, y, blockSize, blockSize);\r\n\r\n                // draw lines\r\n                context.beginPath();\r\n                context.moveTo(x, y);\r\n                context.lineTo(x + blockSize, y);\r\n                context.lineTo(x + blockSize, y + blockSize);\r\n                context.lineTo(x, y + blockSize);\r\n                context.lineTo(x, y);\r\n                context.closePath();\r\n                context.strokeStyle = 'black';\r\n                context.stroke();\r\n            });\r\n        }\r\n        const go = (e) =>{\r\n            if (e.code === \"ArrowLeft\" || e.key === \"a\") {\r\n                direction = -1;\r\n            } else if (e.code === \"ArrowRight\" || e.key === \"d\") {\r\n                direction = 1;\r\n            }\r\n            else if (e.key === \"1\" && skillsAvailable % 2 === 0) {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 1));\r\n                skillsAvailable = skillsAvailable / 2;\r\n                //rectangleElement = document.querySelector(\".rectangle1\");\r\n                //rectangleElement.style.backgroundColor = \"darkred\";\r\n            }\r\n            else if (e.key === \"2\" && skillsAvailable % 3 === 0) {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 2));\r\n                skillsAvailable = skillsAvailable / 3;\r\n                //rectangleElement = document.querySelector(\".rectangle2\");\r\n               // rectangleElement.style.backgroundColor = \"darkred\";\r\n            }\r\n            else if (e.key === \"3\" && skillsAvailable % 5 === 0) {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 3));\r\n                skillsAvailable = skillsAvailable / 5;\r\n                //rectangleElement = document.querySelector(\".rectangle3\");\r\n                //rectangleElement.style.backgroundColor = \"darkred\";\r\n            }\r\n            else if (e.key === \"4\" && skillsAvailable % 7 === 0) {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 4));\r\n                skillsAvailable = skillsAvailable / 7;\r\n               // rectangleElement = document.querySelector(\".rectangle4\");\r\n                //rectangleElement.style.backgroundColor = \"darkred\";\r\n            }\r\n            else if (e.key === \"5\" && skillsAvailable % 11 === 0) {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 5));\r\n                skillsAvailable = skillsAvailable / 11;\r\n               // rectangleElement = document.querySelector(\".rectangle5\");\r\n               // rectangleElement.style.backgroundColor = \"darkred\";\r\n            }\r\n            else if (e.key === \" \") {\r\n                ballsOnBoard.push(new Ball(tableX + tableSize.x / 2, tableY - 5, 5));\r\n            }\r\n        }\r\n        const stop = (e) =>{\r\n            if ((e.code === \"ArrowLeft\" || e.key === \"a\") && direction === -1) {\r\n                direction = 0;\r\n            } else if ((e.code === \"ArrowRight\" || e.key === \"d\") && direction === 1) {\r\n                direction = 0;\r\n            }\r\n        }\r\n        class Block {\r\n            constructor(toughness, row, col, type) {\r\n                this.row = row + 1;\r\n                this.col = col;\r\n                this.toughness = toughness;\r\n                this.type = type;\r\n            }\r\n        }\r\n        class Skill {\r\n            constructor(type, row, col) {\r\n                this.row = row;\r\n                this.col = col;\r\n                this.type = type;\r\n            }\r\n        }\r\n\r\n        class Ball {\r\n            constructor(x, y, type) {\r\n                this.type = type;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.dx = 3;\r\n                this.dy = 4;\r\n                this.radius = 10;\r\n                this.color = '#FFF';\r\n            }\r\n\r\n            reset() {\r\n                if (this.type === 0) {\r\n                    score -= 1000;\r\n                    this.x = tableX + tableSize.x / 2;\r\n                    this.y = tableY - this.radius;\r\n                    this.dx = 3;\r\n                    this.dy = 4;\r\n\r\n                }\r\n                else {\r\n                    // Find the index of this ball in the ballsOnBoard array\r\n                    const index = ballsOnBoard.indexOf(this);\r\n\r\n                    if (index !== -1) {\r\n                        // If the ball is in the array, remove it\r\n                        ballsOnBoard.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            draw(context) {\r\n                context.beginPath();\r\n                context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, true);\r\n                context.closePath();\r\n                context.fillStyle = this.color;\r\n                context.fill();\r\n\r\n                context.beginPath();\r\n                context.arc(this.x, this.y, this.radius - 3, 0, 2 * Math.PI, true);\r\n                context.closePath();\r\n                switch (this.type) {\r\n                    case 0: context.fillStyle = '#FFF';\r\n                        break;\r\n                    case 1: context.fillStyle = \"#AC00AC\";\r\n                        break;\r\n                    case 2: context.fillStyle = 'green';\r\n                        break;\r\n                    case 3: context.fillStyle = 'yellow';\r\n                        break;\r\n                    case 4: context.fillStyle = 'orange';\r\n                        break;\r\n                    case 5: context.fillStyle = '#F00';\r\n                        break;\r\n                }\r\n                context.fill();\r\n            }\r\n\r\n            move() {\r\n                this.x += this.dx;\r\n                this.y += this.dy;\r\n\r\n                // check for collisions with the walls\r\n                if (this.x - this.radius < 0) {\r\n                    this.x = this.radius;\r\n                    this.dx = -this.dx;\r\n                } else if (this.x + this.radius > board.width) {\r\n                    this.x = board.width - this.radius;\r\n                    this.dx = -this.dx;\r\n                }\r\n                else {\r\n                    // check for collisions with blocks\r\n                    let collidedBlockIndex = -1;\r\n\r\n                    for (let i = 0; i < blocks.length; i++) {\r\n                        let block = blocks[i];\r\n                        let x = block.col * blockSize;\r\n                        let y = block.row * blockSize;\r\n\r\n                        if (this.y - this.radius < y + blockSize && this.y + this.radius > y &&\r\n                            this.x + this.radius > x && this.x - this.radius < x + blockSize) {\r\n                            // collision detected\r\n                            collidedBlockIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (collidedBlockIndex !== -1) {\r\n                        let block = blocks[collidedBlockIndex];\r\n                        let x = block.col * blockSize;\r\n\r\n                        if (this.x > x && this.x < x + blockSize) {\r\n                            // ball hit the top or bottom of the block\r\n                            this.dy = -this.dy;\r\n                        } else {\r\n                            // ball hit the left or right side of the block\r\n                            this.dx = -this.dx;\r\n                        }\r\n\r\n                        block.toughness--;\r\n\r\n                        if (block.toughness <= 0) {\r\n                            let rng = Math.floor(Math.random() * 10);\r\n                            let blk = blocks.splice(collidedBlockIndex, 1);\r\n                            score += blk[0].type * 100;\r\n                            if (rng > 4) {\r\n                                let skill = new Skill(blk[0].type, blk[0].row, blk[0].col);\r\n                                skillsOnBoard.push(skill);\r\n                            }\r\n                            if(blocks.length === 0){\r\n                                alert(\"Game Over! Your Score: \" + score);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.y - this.radius < 0) {\r\n                    this.y = this.radius;\r\n                    this.dy = -this.dy;\r\n                } else if (this.y > board.height) {\r\n                    this.reset();\r\n                } else if (this.y + this.radius > tableY && this.y - this.radius < tableY + tableSize.y && this.x > tableX && this.x < tableX + tableSize.x) {\r\n                    // I want to run a sound here\r\n                    let collisionPoint = (this.x - (tableX + tableSize.x / 2)) / (tableSize.x / 2);\r\n                    this.dx = collisionPoint * 5;\r\n                    this.dy = -Math.sqrt(25 - this.dx ** 2);\r\n\r\n                    if (this.type === 0) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const displaySkillsOnScreen = (skillsOnBoard) => {\r\n            const skillsDisplay = document.getElementById('skillsDisplay');\r\n            skillsDisplay.innerHTML = ''; // Clear any previous content\r\n\r\n            skillsOnBoard.forEach(function () {\r\n                // Create a new paragraph for each skill and display its information\r\n                const skillInfo = document.createElement('p');\r\n\r\n                // Append the skill information to the display element\r\n                skillsDisplay.appendChild(skillInfo);\r\n            });}\r\n\r\n        const updateSkills = () => {\r\n            if (skillsOnBoard.length !== 0) {\r\n                let collidedSkillIndex = -1\r\n                for (let i = 0; i < skillsOnBoard.length; i++) {\r\n\r\n                    let skill = skillsOnBoard[i];\r\n\r\n                    if (\r\n                        skill.col * blockSize > tableX &&\r\n                        skill.col * blockSize < tableX + tableSize.x &&\r\n                        skill.row * blockSize > tableY - tableSize.y\r\n                    ) {\r\n                        // Collision detected\r\n                        collidedSkillIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (collidedSkillIndex !== -1) {\r\n                    const skl = skillsOnBoard.splice(collidedSkillIndex, 1);\r\n                   // var rectangleElement;\r\n                    switch (skl[0].type) {\r\n                        case 1:\r\n                           // rectangleElement = document.querySelector(\".rectangle1\");\r\n                            if (skillsAvailable % 2 !== 0) {\r\n                                skillsAvailable = skillsAvailable * 2;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            //rectangleElement = document.querySelector(\".rectangle2\");\r\n                            if (skillsAvailable % 3 !== 0) {\r\n                                skillsAvailable = skillsAvailable * 3;\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            //rectangleElement = document.querySelector(\".rectangle3\");\r\n                            if (skillsAvailable % 5 !== 0) {\r\n                                skillsAvailable = skillsAvailable * 5;\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            //rectangleElement = document.querySelector(\".rectangle4\");\r\n                            if (skillsAvailable % 7 !== 0) {\r\n                                skillsAvailable = skillsAvailable * 7;\r\n                            }\r\n                            break;\r\n                        case 5:\r\n                            //rectangleElement = document.querySelector(\".rectangle5\");\r\n                            if (skillsAvailable % 11 !== 0) {\r\n                                skillsAvailable = skillsAvailable * 11;\r\n                            }\r\n                            break;\r\n                    }\r\n                    //rectangleElement.style.backgroundColor = \"#50FF50\";\r\n                }\r\n                drawSkills(skillsOnBoard, context);\r\n            }\r\n        }\r\n        const changeColor = () => {\r\n            currentIndex = (currentIndex + 1) % colors.length;\r\n            requestAnimationFrame(changeColor);}\r\n        const update = () => {\r\n\r\n            timeSpent++;\r\n\r\n            context.fillStyle = \"black\";\r\n            context.fillRect(0, 0, board.width, board.height);\r\n\r\n            context.beginPath();\r\n            context.arc(tableX + 50, tableY + 100, tableSize.x, -Math.PI / 3, -Math.PI / 3 * 2, true);\r\n            context.closePath();\r\n            context.fillStyle = tableColor;\r\n            context.fill();\r\n            context.fillStyle = tableColor;\r\n            context.fillRect(tableX, tableY + 13, tableSize.x, tableSize.y);\r\n\r\n\r\n            drawBlocks(blocks, context);\r\n            updateSkills();\r\n\r\n            tableX += direction * 5; // move the table based on the direction of movement\r\n            if (tableX < 0) {\r\n                tableX = 0; // prevent the table from moving beyond the left border\r\n            } else if (tableX + tableSize.x > board.width) {\r\n                tableX = board.width - tableSize.x; // prevent the table from moving beyond the right border\r\n            }\r\n            ballsOnBoard.forEach(function (ball) {\r\n                ball.draw(context);\r\n                ball.move();\r\n            })\r\n        }\r\n\r\n        // ... (similarly refactor other functions)\r\n\r\n        initializeGame(); // Start the game\r\n\r\n        // Clean-up logic (similar to componentWillUnmount)\r\n        return () => {\r\n            audio.pause();\r\n            audio.src = '';\r\n            // Clear any intervals or event listeners\r\n            // ...\r\n        };\r\n    });\r\n\r\n    const purpleColor = classNames('rectStyle', 'purpleBackgroundColor');\r\n    const greenColor = classNames('rectStyle', 'greenBackgroundColor');\r\n    const redColor = classNames('rectStyle', 'redBackgroundColor');\r\n    const yellowColor = classNames('rectStyle', 'yellowBackgroundColor');\r\n    const orangeColor = classNames('rectStyle', 'orangeBackgroundColor');\r\n    const mainStyle = 'mainStyle'\r\n\r\n    return (\r\n        <main className={mainStyle}>\r\n\r\n            <div>\r\n                <div className={redColor}></div>\r\n                <div className={orangeColor}></div>\r\n                <div className={yellowColor}></div>\r\n                <div className={greenColor}></div>\r\n                <div className={purpleColor}></div>\r\n            </div>\r\n\r\n            {/* HTML/JSX for rendering the game */}\r\n                <canvas\r\n                id=\"board\"\r\n                width={cols * blockSize}\r\n                height={rows * blockSize}\r\n                style={gameStyle}\r\n            ></canvas>\r\n        </main>\r\n    );\r\n};\r\nconst gameStyle = {\r\n    fontSize: '1%',\r\n    border: '10px solid grey',\r\n    // Define border width, style, and color\r\n    outline: 'none',\r\n    marginLeft: '1%',\r\n};\r\n\r\n\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}